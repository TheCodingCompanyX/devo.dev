import base64, openai
from utils import encode_image
import os
import time
# from playwright.sync_api import sync_playwright

client = openai.Client()


def compress_node(node, level=0):
    indent = "  " * level  # Increase indentation for hierarchy
    # Build a list of property strings for the current node (excluding children)
    props = []
    for key, value in node.items():
        if key == "children":
            continue
        # Round numeric values for clarity
        if isinstance(value, (int, float)):
            props.append(f"{key}:{round(value)}")
        else:
            props.append(f"{key}:{value}")
    # Join properties using a separator for clarity
    props_str = " | ".join(props)
    
    # Construct the current node's output string
    output = f"{indent}{node.get('name', 'Unnamed')} : {props_str}\n"
    
    # Process children nodes recursively if they exist
    if "children" in node and isinstance(node["children"], list):
        for child in node["children"]:
            output += compress_node(child, level + 1)
        # Add an extra newline after processing all children to separate nodes more clearly
        output += "\n"
    return output



def get_design_feedback(figma_data, image_path, route):
    """Use GPT-4 to provide feedback on the design."""
    #base64_image = encode_image(image_path)

    try:
        
        files = os.listdir(route)
        code = ""

        for root, _, files in os.walk(route):  # Recursively walk through directories
            for file in files:
                if file.endswith((".png", ".jpg", ".jpeg")):  # Skip image files
                    continue

                file_path = os.path.join(root, file)  # Get full file path
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        relative_path = os.path.relpath(file_path, route)  # Relative path for clarity
                        code += f"{relative_path}\n```\n"
                        code += f.read()
                        code += "\n```\n"
                except Exception as e:
                    print(f"Error reading {file_path}: {e}")
        model = "o1-mini"

        formatted_str = ", ".join(
            f"{key}: {round(value) if isinstance(value, (int, float)) else value}" 
            for key, value in figma_data.items()
        )
        cleaned_figma_string = formatted_str.replace(",", "").replace("'", "")

        full_prompt = f"""Design reference:\n{cleaned_figma_string}\n\nCode:\n{code}\nThe given design data has the measurements and styles of the responsive UI components that need to be built.\nThe measurements have X, Y, Height and Width. These should NOT be used as-is. Based on the measurements, use your judgment to check if the tailwinds classes are as per the expected margins, paddings, height, width and alignment. \nList only major issues with the code, such as stylings and spacing. Highlight issues precisely, do not suggest code changes. Lookup tailwinds classes if necessary."""
        print(full_prompt)
        print("--------------------------------------------------")
        print("--------------------------------------------------")
        
        response = client.chat.completions.create(
        model=model, 
        messages=[
            {"role": "user", 
             "content":  [
                {"type": "text", "text": full_prompt}
            ]},
        ]
        )
        print(f"""Model: {model}""")
        result = response.choices[0].message.content
        print(result)
        return result.replace("**", "")
        
    except Exception as e:
        print(f"Error getting UI feedback: {e}")
        raise

def test_UI(figma_data, base_dir, route):
    """Test the UI generated by the code."""
    return get_design_feedback(figma_data, base_dir, route)


import json

if __name__ == "__main__":
    with open("../samplereactproject/cleaned_figma_data.json", "r") as f:
        figma_data = json.load(f)

    compressed_output = compress_node(figma_data)
    print(compressed_output)
    test_UI(figma_data=figma_data, base_dir="../samplereactproject/app/playground", route="../samplereactproject/app/playground")